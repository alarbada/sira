// Package mistral provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package mistral

// Defines values for ChatCompletionRequestMessagesRole.
const (
	ChatCompletionRequestMessagesRoleAssistant ChatCompletionRequestMessagesRole = "assistant"
	ChatCompletionRequestMessagesRoleSystem    ChatCompletionRequestMessagesRole = "system"
	ChatCompletionRequestMessagesRoleUser      ChatCompletionRequestMessagesRole = "user"
)

// Defines values for ChatCompletionResponseChoicesFinishReason.
const (
	Length      ChatCompletionResponseChoicesFinishReason = "length"
	ModelLength ChatCompletionResponseChoicesFinishReason = "model_length"
	Stop        ChatCompletionResponseChoicesFinishReason = "stop"
)

// Defines values for ChatCompletionResponseChoicesMessageRole.
const (
	ChatCompletionResponseChoicesMessageRoleAssistant ChatCompletionResponseChoicesMessageRole = "assistant"
	ChatCompletionResponseChoicesMessageRoleUser      ChatCompletionResponseChoicesMessageRole = "user"
)

// Defines values for EmbeddingRequestEncodingFormat.
const (
	Float EmbeddingRequestEncodingFormat = "float"
)

// ChatCompletionRequest defines model for ChatCompletionRequest.
type ChatCompletionRequest struct {
	// MaxTokens The maximum number of tokens to generate in the completion.
	//
	// The token count of your prompt plus `max_tokens` cannot exceed the model's context length.
	MaxTokens *int `json:"max_tokens"`

	// Messages The prompt(s) to generate completions for, encoded as a list of dict with role and content. The first prompt role should be `user` or `system`.
	Messages []struct {
		Content *string                            `json:"content,omitempty"`
		Role    *ChatCompletionRequestMessagesRole `json:"role,omitempty"`
	} `json:"messages"`

	// Model ID of the model to use. You can use the [List Available Models](/api#operation/listModels) API to see all of your available models, or see our [Model overview](/models) for model descriptions.
	Model string `json:"model"`

	// RandomSeed The seed to use for random sampling. If set, different calls will generate deterministic results.
	RandomSeed *int `json:"random_seed,omitempty"`

	// SafeMode Whether to inject a safety prompt before all conversations.
	SafeMode *bool `json:"safe_mode,omitempty"`

	// Stream Whether to stream back partial progress. If set, tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message. Otherwise, the server will hold the request open until the timeout or until completion, with the response containing the full result as JSON.
	Stream *bool `json:"stream"`

	// Temperature What sampling temperature to use, between 0.0 and 1.0. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
	//
	// We generally recommend altering this or `top_p` but not both.
	Temperature *float32 `json:"temperature"`

	// TopP Nucleus sampling, where the model considers the results of the tokens with `top_p` probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
	//
	// We generally recommend altering this or `temperature` but not both.
	TopP *float32 `json:"top_p"`
}

// ChatCompletionRequestMessagesRole defines model for ChatCompletionRequest.Messages.Role.
type ChatCompletionRequestMessagesRole string

// ChatCompletionResponse defines model for ChatCompletionResponse.
type ChatCompletionResponse struct {
	Choices *[]struct {
		FinishReason ChatCompletionResponseChoicesFinishReason `json:"finish_reason"`
		Index        int                                       `json:"index"`
		Message      *struct {
			Content *string                                   `json:"content,omitempty"`
			Role    *ChatCompletionResponseChoicesMessageRole `json:"role,omitempty"`
		} `json:"message,omitempty"`
	} `json:"choices,omitempty"`
	Created *int    `json:"created,omitempty"`
	Id      *string `json:"id,omitempty"`
	Model   *string `json:"model,omitempty"`
	Object  *string `json:"object,omitempty"`
	Usage   *struct {
		CompletionTokens int `json:"completion_tokens"`
		PromptTokens     int `json:"prompt_tokens"`
		TotalTokens      int `json:"total_tokens"`
	} `json:"usage,omitempty"`
}

// ChatCompletionResponseChoicesFinishReason defines model for ChatCompletionResponse.Choices.FinishReason.
type ChatCompletionResponseChoicesFinishReason string

// ChatCompletionResponseChoicesMessageRole defines model for ChatCompletionResponse.Choices.Message.Role.
type ChatCompletionResponseChoicesMessageRole string

// EmbeddingRequest defines model for EmbeddingRequest.
type EmbeddingRequest struct {
	// EncodingFormat The format of the output data.
	EncodingFormat *EmbeddingRequestEncodingFormat `json:"encoding_format,omitempty"`

	// Input The list of strings to embed.
	Input *[]string `json:"input,omitempty"`

	// Model The ID of the model to use for this request.
	Model *string `json:"model,omitempty"`
}

// EmbeddingRequestEncodingFormat The format of the output data.
type EmbeddingRequestEncodingFormat string

// EmbeddingResponse defines model for EmbeddingResponse.
type EmbeddingResponse struct {
	Data []struct {
		Embedding *[]float32 `json:"embedding,omitempty"`
		Index     *int       `json:"index,omitempty"`
		Object    *string    `json:"object,omitempty"`
	} `json:"data"`
	Id     string `json:"id"`
	Model  string `json:"model"`
	Object string `json:"object"`
	Usage  struct {
		PromptTokens int `json:"prompt_tokens"`
		TotalTokens  int `json:"total_tokens"`
	} `json:"usage"`
}

// Model defines model for Model.
type Model struct {
	Created int    `json:"created"`
	Id      string `json:"id"`
	Object  string `json:"object"`
	OwnedBy string `json:"owned_by"`
}

// ModelList defines model for ModelList.
type ModelList struct {
	Data   []Model `json:"data"`
	Object string  `json:"object"`
}

// CreateChatCompletionJSONRequestBody defines body for CreateChatCompletion for application/json ContentType.
type CreateChatCompletionJSONRequestBody = ChatCompletionRequest

// CreateEmbeddingJSONRequestBody defines body for CreateEmbedding for application/json ContentType.
type CreateEmbeddingJSONRequestBody = EmbeddingRequest
